name: Android Emulator Setup and Validation for Appium

permissions:
 contents: write

on:
 push:
   branches:
     - main

jobs:
 android-setup:
   runs-on: ubuntu-latest

   steps:
     - name: Checkout Repository
       uses: actions/checkout@v3

     - name: Install Dependencies
       run: |
         sudo apt-get update
         sudo apt-get install -y openjdk-11-jdk unzip wget curl qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils ffmpeg
         sudo adduser $USER kvm
         sudo chown $USER /dev/kvm
         ls -la /dev/kvm
         npm install -g appium-video-recorder

     - name: Set up Node.js
       uses: actions/setup-node@v3
       with:
         node-version: 18

     - name: Setup Android SDK
       run: |
         mkdir -p "$HOME/android-sdk/cmdline-tools"
         cd "$HOME/android-sdk/cmdline-tools"
         
         wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
         unzip -q commandlinetools-linux-9477386_latest.zip
         
         mkdir -p latest
         mv cmdline-tools/* latest/
         rmdir cmdline-tools
         
         echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
         echo "PATH=$HOME/android-sdk/cmdline-tools/latest/bin:$HOME/android-sdk/platform-tools:$PATH" >> $GITHUB_ENV
         
         ls -la "$HOME/android-sdk/cmdline-tools/latest/bin"

     - name: Install Android Tools
       run: |
         yes | sdkmanager --licenses > /dev/null
         sdkmanager "platform-tools" "platforms;android-30" "build-tools;30.0.3"
         sdkmanager "system-images;android-30;google_apis;x86_64"
         
         echo "Verificando instalación:"
         sdkmanager --list_installed

     - name: Create and Start Emulator
       run: |
         export ANDROID_AVD_HOME=$HOME/.android/avd
         
         echo "no" | avdmanager create avd \
           -n test \
           -k "system-images;android-30;google_apis;x86_64" \
           -d pixel_5 \
           --force
         
         echo 'hw.cpu.ncore=2' >> ~/.android/avd/test.avd/config.ini
         echo 'hw.ramSize=2048' >> ~/.android/avd/test.avd/config.ini
         echo 'disk.dataPartition.size=2048M' >> ~/.android/avd/test.avd/config.ini
         
         nohup $ANDROID_HOME/emulator/emulator \
           -avd test \
           -no-window \
           -no-audio \
           -gpu swiftshader_indirect \
           -no-snapshot \
           -no-boot-anim \
           -qemu -enable-kvm \
           > emulator.log 2>&1 &
         
         echo "Esperando emulador..."
         while true; do
           if adb shell getprop sys.boot_completed 2>/dev/null | grep -q '1'; then
             echo "Emulador listo"
             break
           fi
           if ! pgrep -f emulator > /dev/null; then
             echo "Error: Emulador terminó inesperadamente"
             cat emulator.log
             exit 1
           fi
           echo "Booteo en progreso..."
           sleep 5
         done

     - name: Download APK
       run: |
         mkdir -p ./apps
         wget -O ./apps/gfa22112024.apk https://appsreservamos2024r1.s3.us-east-2.amazonaws.com/gfa22112024.apk

     - name: Setup Appium
       run: |
         npm install -g appium@2.4.1
         appium driver install uiautomator2@3.9.0

         echo "Starting Appium..."
         appium \
           --base-path /wd/hub \
           --log-level info \
           --plugin appium-video-recorder \
           > appium.log 2>&1 &
        
         sleep 10
        
         if curl -s http://localhost:4723/wd/hub/status | grep -q "ready"; then
           echo "Appium started successfully"
           curl -s http://localhost:4723/wd/hub/status | jq '.'
         else
           echo "Appium failed to start. Logs:"
           cat appium.log
           exit 1
         fi
        
         appium driver list --installed

     - name: Install Project Dependencies
       run: |
         npm install

     - name: Run E2E Tests 
       env:
         BRAND: gfa
         CI: true
       run: npm run wdio

     - name: Generate Allure Report  
       if: always()
       run: |
         npm install -g allure-commandline
         allure generate allure-results --clean

     - name: Deploy to GitHub Pages
       if: always()
       uses: peaceiris/actions-gh-pages@v3
       with:
         github_token: ${{ secrets.GITHUB_TOKEN }}
         publish_dir: ./allure-report

     - name: Upload Logs
       if: always()
       uses: actions/upload-artifact@v3
       with:
         name: test-logs
         path: |
           appium.log
           emulator.log
           allure-results/
           videos/